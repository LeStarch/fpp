#!/bin/sh -e

cd `dirname $0`

. ../../../../scripts/test-utils.sh

fpp_to_json=../../../../bin/fpp-to-json

# Get the name of a test function associated with a test input file
get_func_name()
{
  echo $1 | sed 's;.*/\([^/]*\)/\([^/]*\)\.fpp$;\1_\2;'
}

# Run fpp-to-json on fpp-check test cases to (1) get the native build
# tracing info and (2) test the native build. All we care about is
# that the tool ran without crashing. For these tests, we ignore
# the output of the tool.
run_fpp_check_test() {
  infile=$1
  # Check for signs of a crash
  status=0
  if $fpp_to_json $infile 2>&1 | grep -qi "exception in thread"
  then
    # Record the error output for debugging
    func_name=`get_func_name $infile`
    $fpp_to_json $infile > $func_name.out.txt 2>&1 || true
    status=1
  fi
  # Remove the tool output, if any.
  # If the tool execution caused an error, but there was no
  # crash, there won't be any output, and that's OK.
  rm -f fpp-ast.json fpp-loc-map.json fpp-analysis.json
  return $status
}

# Generate fpp-check test cases by doing the following:
# Get all .fpp test cases in the fpp-check/test/* directories
# For each test case:
#   1. Create a function with the following name: <directory name>_<file name>
#   2. In the function, call run_fpp_check_test (defined in this file) and
#      provide the filename of the FPP model to run
#   3. Append the function to fpp-check-tests.sh
#   4. Add the test name to the outut of this function
generate_fpp_check_tests()
{
  rm -f fpp-check-tests.sh
  for file in `find ../../../fpp-check/test -name '*.fpp'`
  do
    func_name=`get_func_name $file`
    echo $func_name
    echo "
$func_name()
{
  run_fpp_check_test $file
}" >> fpp-check-tests.sh
  done
}

fpp_check_tests=`generate_fpp_check_tests`

. ./fpp-check-tests.sh

run_suite $fpp_check_tests
