// ======================================================================
// \title  TlmPackets_P1TlmPacketsAc.cpp
// \author Generated by fpp-to-cpp
// \brief  cpp file for P1 telemetry packets
// ======================================================================

#include "Fw/Types/Assert.hpp"
#include "TlmPackets_P1TlmPacketsAc.hpp"

namespace M {

  namespace TlmPackets_P1TlmPackets {

    // ----------------------------------------------------------------------
    // File-local constants and variables
    // ----------------------------------------------------------------------

    namespace {

      struct SizeBounds {

        // The size of a packet header
        static constexpr FwSizeType packetHeaderSize = Fw::Time::SERIALIZED_SIZE +
          sizeof(FwTlmPacketizeIdType) + sizeof(FwPacketDescriptorType);

        // A packet header must fit in a com buffer
        static_assert(
          packetHeaderSize <= FW_COM_BUFFER_MAX_SIZE,
          "packet header must fit in com buffer"
        );

        // The max data size in a com buffer
        static constexpr FwSizeType packetMaxDataSize = FW_COM_BUFFER_MAX_SIZE - packetHeaderSize;

      };

      namespace Packets {

        // The number of packets
        constexpr FwIndexType numPackets = 0;

        static_assert(
          numPackets <= Svc::MAX_PACKETIZER_PACKETS,
          "number of packets must be less than or equal to the maximum"
        );

      }

      // The size of the array of omitted channels
      constexpr FwIndexType omittedArraySize = 0;

    }

    // ----------------------------------------------------------------------
    // Extern variables
    // ----------------------------------------------------------------------

    constexpr Svc::TlmPacketizerPacketList packetList = {
      Packets::numPackets
    };


    constexpr Svc::TlmPacketizerPacket omittedChannels = {
      omittedArray,
      0,
      0,
      omittedArraySize
    };

  }

}
